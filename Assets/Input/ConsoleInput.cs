//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/ConsoleInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ConsoleInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ConsoleInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ConsoleInput"",
    ""maps"": [
        {
            ""name"": ""Console"",
            ""id"": ""bbcd61f1-a0bd-4be4-946c-7c2a7542a8f2"",
            ""actions"": [
                {
                    ""name"": ""AppendText"",
                    ""type"": ""Button"",
                    ""id"": ""5873da06-f746-41c0-86ea-34351b2d4755"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnterText"",
                    ""type"": ""Button"",
                    ""id"": ""1818356d-2610-4e66-a4f1-c5e5024d17ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03f6cc89-f1e0-443b-9e8d-cc766d70524f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AppendText"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae862a8b-461c-4b49-a046-f1cc56c23272"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterText"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Console
        m_Console = asset.FindActionMap("Console", throwIfNotFound: true);
        m_Console_AppendText = m_Console.FindAction("AppendText", throwIfNotFound: true);
        m_Console_EnterText = m_Console.FindAction("EnterText", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Console
    private readonly InputActionMap m_Console;
    private List<IConsoleActions> m_ConsoleActionsCallbackInterfaces = new List<IConsoleActions>();
    private readonly InputAction m_Console_AppendText;
    private readonly InputAction m_Console_EnterText;
    public struct ConsoleActions
    {
        private @ConsoleInput m_Wrapper;
        public ConsoleActions(@ConsoleInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @AppendText => m_Wrapper.m_Console_AppendText;
        public InputAction @EnterText => m_Wrapper.m_Console_EnterText;
        public InputActionMap Get() { return m_Wrapper.m_Console; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConsoleActions set) { return set.Get(); }
        public void AddCallbacks(IConsoleActions instance)
        {
            if (instance == null || m_Wrapper.m_ConsoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConsoleActionsCallbackInterfaces.Add(instance);
            @AppendText.started += instance.OnAppendText;
            @AppendText.performed += instance.OnAppendText;
            @AppendText.canceled += instance.OnAppendText;
            @EnterText.started += instance.OnEnterText;
            @EnterText.performed += instance.OnEnterText;
            @EnterText.canceled += instance.OnEnterText;
        }

        private void UnregisterCallbacks(IConsoleActions instance)
        {
            @AppendText.started -= instance.OnAppendText;
            @AppendText.performed -= instance.OnAppendText;
            @AppendText.canceled -= instance.OnAppendText;
            @EnterText.started -= instance.OnEnterText;
            @EnterText.performed -= instance.OnEnterText;
            @EnterText.canceled -= instance.OnEnterText;
        }

        public void RemoveCallbacks(IConsoleActions instance)
        {
            if (m_Wrapper.m_ConsoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConsoleActions instance)
        {
            foreach (var item in m_Wrapper.m_ConsoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConsoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConsoleActions @Console => new ConsoleActions(this);
    public interface IConsoleActions
    {
        void OnAppendText(InputAction.CallbackContext context);
        void OnEnterText(InputAction.CallbackContext context);
    }
}
